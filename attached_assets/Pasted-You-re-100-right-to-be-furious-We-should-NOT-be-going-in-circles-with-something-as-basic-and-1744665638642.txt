You're 100% right to be furious. We **should NOT be going in circles** with something as **basic and critical** as authentication. This is **foundational** to WillTank â€” and it must work **flawlessly**, without hacks, without redirects gone wrong, and without faking functionality.

Letâ€™s now write a **God-mode, cut-through-the-bullshit prompt** to make sure the AI (or Replit shell/Clerk config/Next.js/Vercel app) knows **exactly what to fix** and **how to fix it**.

---

## ðŸš¨ COPY-PASTE THIS FULL FIX PROMPT INTO REPLIT OR YOUR DEV AI TERMINAL:

---

> ðŸš¨ **FIX AUTH FLOW â€“ FINAL VERSION â€“ NO MORE BROKEN LOGIC** ðŸš¨  
> THE PLATFORM IS LIVE AT `willtank.com`. Clerk is being used for auth. Hereâ€™s whatâ€™s BROKEN and MUST be fixed right now:
>
> ### ðŸ”´ CRITICAL ISSUES:
> 1. **Email Sign-Up is Broken**  
> â€£ User enters credentials  
> â€£ They see the email verification screen for just **1 second**, then it redirects them to the login page â€” **before** they verify the code.  
> â€£ Login fails because they havenâ€™t verified â€” this is broken logic.
>
> 2. **Google OAuth is Broken**  
> â€£ User selects a Google account  
> â€£ It redirects to a **404 page** â€” that is unprofessional and unacceptable.
>
> ### âœ… WHAT TO DO RIGHT NOW:
>
> #### âœ… STEP 1: Fix Clerk Config in `pages/_app.tsx` or root layout
```tsx
<ClerkProvider
  publishableKey={process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
  navigate={(to) => router.push(to)}
  afterSignInUrl="/dashboard"
  afterSignUpUrl="/onboarding"
  signInUrl="/sign-in"
  signUpUrl="/sign-up"
/>
```
> - This ensures users always land in the right place after auth.
> - DO NOT redirect users away from the email verification screen.
>
> #### âœ… STEP 2: Fix Clerk Middleware in `middleware.ts`
```ts
import { authMiddleware } from "@clerk/nextjs";

export default authMiddleware({
  publicRoutes: ["/", "/about", "/contact", "/sign-in", "/sign-up"],
  ignoredRoutes: ["/api/webhooks(.*)"],
});
```
> - No redirect unless user is **not authenticated AND on protected route.**
>
> #### âœ… STEP 3: Correct Google OAuth Redirects
> Go to your **Clerk Dashboard > Social Connections > Google** and ensure:
> - You have `https://willtank.com/*` and `https://willtank.com/dashboard` as **Authorized Redirect URIs**
> - In `.env` make sure:
```
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_live_...
CLERK_SECRET_KEY=sk_live_...
```

> #### âœ… STEP 4: Fix Broken 404 Routing
> Add a `[...sign-in-callback].ts` or similar if Clerk needs a callback handler. Otherwise, make sure `/dashboard` and `/onboarding` exist and are accessible.
>
> #### âœ… STEP 5: Set Up Routing Guards
> In all protected pages, use this:
```tsx
import { SignedIn, SignedOut, RedirectToSignIn } from "@clerk/nextjs";

export default function ProtectedPage() {
  return (
    <>
      <SignedIn>
        <DashboardContent />
      </SignedIn>
      <SignedOut>
        <RedirectToSignIn />
      </SignedOut>
    </>
  );
}
```

---

### ðŸ›  Example File Structure to Follow (No Confusion)
```
/pages
  |_ sign-in.tsx
  |_ sign-up.tsx
  |_ dashboard.tsx
  |_ onboarding.tsx
  |_ index.tsx
  |_ middleware.ts
```

---

### ðŸš« DO NOT:
- Redirect user to `/login` if not verified yet.
- Redirect Google users to undefined or broken routes.
- Show verification page then remove it before code input.

---

### âœ… FINAL GOAL:
- Email signup works: stays on verify screen until success âœ…  
- Google login/signup works and lands on dashboard âœ…  
- No 404 pages at any point âœ…  
- Production ready auth flow like a real SaaS âœ…  
- All errors shown in console are fixed âœ…  

---

> This is production. This is WillTank. This is not a playground. FIX THIS CLEANLY and PERMANENTLY or roll back until it's solid.

---

ðŸ”¥ Let me know when youâ€™re ready to test the new flow. If you want, I can also write exact `sign-in.tsx`, `sign-up.tsx`, and `dashboard.tsx` files for you, 100% working with Clerk and no errors. Just say the word.