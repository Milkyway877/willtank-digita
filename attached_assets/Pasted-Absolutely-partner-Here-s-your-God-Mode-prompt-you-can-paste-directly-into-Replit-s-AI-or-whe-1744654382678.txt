Absolutely, partner! Here’s your **God-Mode prompt** you can paste directly into Replit’s AI (or wherever you’re configuring Replit and Clerk together). This prompt will ensure Clerk is used correctly for full authentication and user management within your WillTank platform, using the keys you’ve provided. Everything is written to avoid breaking anything and integrate smoothly with your Replit Database backend.

---

### ✅ COPY & PASTE THIS PROMPT INTO REPLIT AI (OR YOUR CONFIG SYSTEM):

```
You are setting up Clerk authentication and user management in this project on Replit. The environment uses Vite for frontend, and Replit Database for backend data handling. You must do the following:

🔐 1. CLERK SETUP
- Use these API keys:
  - VITE_CLERK_PUBLISHABLE_KEY=pk_live_Y2xlcmsud2lsbHRhbmsuY29tJA
  - VITE_CLERK_SECRET_KEY=sk_live_jVSOIePTefpxUcaR8A1aNFJ5hfuXuGC5feZcR5nNBf
- Ensure these are loaded into `.env` and referenced as:
  ```env
  import.meta.env.VITE_CLERK_PUBLISHABLE_KEY
  import.meta.env.VITE_CLERK_SECRET_KEY
  ```

⚙️ 2. FRONTEND INTEGRATION
- Install Clerk’s Vite SDK:
  ```bash
  npm install @clerk/clerk-react
  ```
- Wrap the root of your React app in `ClerkProvider` using the publishable key:
  ```js
  import { ClerkProvider } from "@clerk/clerk-react";

  const clerkPubKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;

  ReactDOM.createRoot(document.getElementById("root")).render(
    <ClerkProvider publishableKey={clerkPubKey}>
      <App />
    </ClerkProvider>
  );
  ```

🛂 3. ROUTE PROTECTION
- Protect routes using `SignedIn`, `SignedOut`, and `RedirectToSignIn` components:
  ```js
  import { SignedIn, SignedOut, RedirectToSignIn } from "@clerk/clerk-react";

  const ProtectedPage = () => (
    <>
      <SignedIn> <YourSecureComponent /> </SignedIn>
      <SignedOut> <RedirectToSignIn /> </SignedOut>
    </>
  );
  ```

🧠 4. USER DATA HANDLING
- On login/signup, grab current user and store them in Replit DB:
  ```js
  import { useUser } from "@clerk/clerk-react";
  import { set } from "@replit/database";

  const { user } = useUser();

  const saveUserToDB = async () => {
    const dbUser = {
      id: user.id,
      name: user.fullName,
      email: user.primaryEmailAddress.emailAddress,
      phone: user.phoneNumbers[0]?.phoneNumber || null,
      createdAt: new Date().toISOString(),
      role: "user",
    };
    await set(`user:${user.id}`, dbUser);
  };
  ```

🧑‍💼 5. ADMIN PROTECTION
- For admin access, use `role: 'admin'` in the user object.
- Check in code:
  ```js
  if (user && user.publicMetadata.role === "admin") {
    // show admin panel
  } else {
    // redirect or block
  }
  ```

📨 6. CLERK WEBHOOKS
- Configure Clerk Webhooks (in Clerk Dashboard) to call a Replit endpoint:
  - Trigger on: `user.created`, `user.updated`, `user.deleted`
  - POST data to: `https://your-replit-app.repl.co/api/clerk-webhook`
  - This webhook should sync changes to the Replit DB.

🌐 7. SIGNUP / SIGNIN PAGES
- Add Clerk's prebuilt pages:
  ```js
  import {
    SignIn,
    SignUp,
    UserButton,
    RedirectToUserProfile
  } from "@clerk/clerk-react";

  <SignIn path="/sign-in" routing="path" />;
  <SignUp path="/sign-up" routing="path" />;
  ```

🔐 8. OPTIONAL 2FA
- In Clerk dashboard, enable 2FA via Google Authenticator for extra security.
- No need to manually code QR handling — Clerk handles it.
- Make sure your settings in Clerk → Authentication → MFA have "Time-based One-Time Password (TOTP)" enabled.

🛑 DO NOT:
- Use localStorage for auth
- Expose the secret key in frontend (only in Replit backend server code if needed)
- Mix dummy users — only real users managed by Clerk

✅ FINAL GOALS:
- All users must go through Clerk auth
- All auth-protected routes must verify users via Clerk
- Replit Database must store user metadata keyed by Clerk user ID
- Admin must be able to see users, assign roles, and manage platform features based on auth

Ensure everything works in production by testing Clerk login, signup, user sync to DB, and admin access control.
```

---

Let me know when you want the **Webhook handler code**, the **Admin user creator**, or the **Real-time syncing setup** with Clerk. We can fully integrate all these features step-by-step 🔐🚀